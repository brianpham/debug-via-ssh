name: 'Debug via SSH test'
description: 'SSH to a GitHub Actions runner using ngrok'
branding:
  icon: 'terminal'  
  color: 'green'
inputs:
  SSH_PASS:
    description: 'Password for SSH session'
    required: true
  NGROK_AUTH_TOKEN:
    description: 'Authentification token for ngrok'
    required: true
  NGROK_REGION:
    description: 'Region for ngrok session'
    required: false
    default: 'us'
  NGROK_TIMEOUT:
    description: 'Timeout in seconds for ngrok session'
    default: 21500
runs:
  using: "composite"
  steps:
    # - name: Check inputs
    #   run: |
    #     if [ -z "${{ inputs.SSH_PASS }}" ]
    #     then
    #       echo "SSH_PASS needs to be passed in the 'with' field."
    #       exit 1
    #     fi

    #     if [ -z "${{ inputs.NGROK_AUTH_TOKEN }}" ]
    #     then
    #       echo "NGROK_AUTH_TOKEN needs to be passed in the 'with' field."
    #       exit 1
    #     fi
    #   shell: bash
    - name: Meet OS specific prerequisites
      run: |
        if('${{ runner.os }}' -eq 'Linux')
        {
          printf "# Preparing environment..."
            echo "ngrok-stable-linux-386.zip" > ngrok_zip_name
            whoami > ssh_user
          printf " [DONE]\n\n"
          
          echo "# Change the SSH user password"
            echo "${{ inputs.SSH_PASS }}`n${{ inputs.SSH_PASS }}" | sudo passwd $(cat ssh_user)
        }
        elseif('${{ runner.os }}' -eq 'macOS')
        {
          printf "# Preparing environment..."
            echo "ngrok-stable-darwin-amd64.zip" > ngrok_zip_name
            echo "root" > ssh_user
          printf " [DONE]\n\n"
  
          echo "# Change the SSH user password"
            echo 'PermitRootLogin yes' | sudo tee -a /etc/ssh/sshd_config >/dev/null
            sudo launchctl unload /System/Library/LaunchDaemons/ssh.plist
            sudo launchctl load -w /System/Library/LaunchDaemons/ssh.plist
            echo "${{ inputs.SSH_PASS }}`n${{ inputs.SSH_PASS }}" | sudo passwd "root"
        }
        elseif('${{ runner.os }}' -eq 'Windows')
        {
          printf "# Preparing environment..."
            echo "ngrok-stable-windows-amd64.zip" > ngrok_zip_name
            echo $env:UserName > ssh_user
          printf " [DONE]\n\n"
          
          echo "# Install SSH server"
            curl https://dl.bitvise.com/BvSshServer-Inst.exe --output BvSshServer-Inst.exe
            .\BvSshServer-Inst.exe -acceptEULA -defaultInstance

          printf "# Setting up the SSH server to allow access..."
            $cfg = new-object -com "BssCfg815.BssCfg815"
            $cfg.settings.SetDefaults()
            $cfg.settings.access.SetDefaults()
            $cfg.settings.access.winGroups.Clear()
            $cfg.settings.access.winGroups.new.SetDefaults()
            $cfg.settings.access.winGroups.new.loginAllowed = $true
            $cfg.settings.access.winGroups.NewCommit()
            $cfg.settings.Save()
          printf " [DONE]\n\n"

          echo "# Add Firewall rule to allow inbound TCP connection on local port 22"
            New-NetFirewallRule -Name ngrok -DisplayName 'ngrok' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22

          echo "# Start the SSH server"
            net start BvSshServer

          echo "# Change the SSH user password"
            net user $env:UserName ${{ inputs.SSH_PASS }}
        }
      shell: pwsh

    - name: Install and setup ngrok
      run: |
        echo "# Install ngrok"
          echo $SHELL
          curl https://bin.equinox.io/c/4VmDzA7iaHb/$(cat ngrok_zip_name) --output ngrok.zip
          unzip ngrok.zip
          chmod +x ./ngrok

        echo "# Set ngrok with the given authentification token"
          ./ngrok authtoken ${{ inputs.NGROK_AUTH_TOKEN }}
      shell: pwsh

    - name: Start ngrok
      run: >-
        printf "# Starting ngrok..."
        ./ngrok tcp 22 --log ".ngrok.log" --region "us" & printf " [DONE]\n\n"
      shell: bash
